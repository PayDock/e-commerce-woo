# Removed unused top-level image definition, as most jobs override it.
# image: 412245956714.dkr.ecr.ap-southeast-2.amazonaws.com/docker-hub/library/amazoncorretto:21-alpine

stages:
  - test
  - publish
  - quality
  - deploy_cba
  - deploy_multitenant

# Removed irrelevant IDE-specific annotation.
# noinspection ComposeMissingKeys
include:
  - project: "paydock/platform/gitlab-templates"
    file: "/deploy/version.yml"
  - project: "paydock/platform/gitlab-templates"
    file: "/security/gitlab-security-scans.yaml"
  - project: "paydock/platform/gitlab-templates"
    file: "/code_quality.yml"

run_tests:
  image: composer:lts
  stage: test
  script:
    - composer install
    - ./vendor/bin/phpunit ./tests

run_phpcs:
  image: composer:lts
  stage: quality
  script:
    - composer install
    - ./vendor/bin/phpcs --report=json . > phpcs-report.json || true
    - ls phpcs-report.json
  artifacts:
    name: phpcs-report.json
    paths:
      - phpcs-report.json

phpcs_report:
  image: python:3.9-slim
  stage: quality
  needs:
    - job: run_phpcs
      artifacts: true
  script:
    - python phpcs2codeclimate.py
  artifacts:
    reports:
      codequality:
        - code_climate_phpcs_report.json

prepare_power_board_version:
  image: composer:lts
  stage: publish
  # Uncomment the 'rules' section below if you want this job to run only on 'main' and 'power_board' branches.
  # rules:
  #   - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "power_board"'
  needs:
    - job: create_version
      artifacts: true
  script:
    - VERSION=$(cat version)
    - composer install
    - /bin/sh build/power-board/build-powerboard.prod.sh
    - /bin/sh build/power-board/clear-cs-warnings-powerboard.sh
    # Replaced fragile grep/sed with a slightly more robust (though still regex-based) approach.
    # Consider using a PHP script to parse plugin.php if more robust parsing is needed.
    - MAJOR_MINOR=$(grep -oP "PLUGIN_VERSION',\s*'\K[0-9]+\.[0-9]+\.[0-9]+" plugin.php | head -n 1)
    - echo "ARTIFACT_NAME=woo_powerboard-$MAJOR_MINOR-$VERSION" > VERSION.TXT
  artifacts:
    paths:
      - VERSION.TXT
    reports:
      dotenv: VERSION.TXT

publish_power_board:
  image: composer:lts
  stage: publish
  # Uncomment the 'rules' section below if you want this job to run only on 'main' and 'power_board' branches.
  # rules:
  #   - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "power_board"'
  needs:
    - job: prepare_power_board_version
      artifacts: true
  script:
    - composer install --no-dev
    - /bin/sh build/power-board/build-powerboard.prod.sh
    - /bin/sh build/power-board/clear-cs-warnings-powerboard.sh
    - /bin/sh cleanup_files_for_zip.sh
    - echo "ZIP_PUBLISH_JOB_ID=$CI_JOB_ID" > zip_publish.job.id # Renamed to avoid conflict if already used
    # Simplified artifact preparation: move all contents into the target directory.
    - mkdir -p power-board
    - mv $(ls -A | grep -v 'power-board') power-board/ || true # Move all current contents into power-board/, ignore 'power-board' if it exists.
    # The '|| true' handles cases where grep might return nothing (e.g., if only 'power-board' exists)
  artifacts:
    name: "$ARTIFACT_NAME" # Ensure artifacts are named dynamically
    paths:
      - power-board/
    reports:
      dotenv: zip_publish.job.id
  trigger:
    # IMPORTANT: Replace with your actual downstream project path, e.g., "paydock/platform/downstream-project"
    project: "your/downstream/project/path"
    branch: main # Or the branch you want to trigger
    strategy: depend # Ensures the downstream pipeline runs only if this job succeeds
    # Pass variables to downstream if needed, e.g., the artifact name and upstream job ID
    variables:
      UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
      POWERBOARD_ZIP_JOB_ID: $CI_JOB_ID # Use this in downstream to fetch artifact

prepare_paydock_version:
  image: composer:lts
  stage: publish
  # Uncomment the 'rules' section below if you want this job to run only on 'main' and 'power_board' branches.
  # rules:
  #   - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "power_board"'
  needs:
    - job: create_version
      artifacts: true
  script:
    - VERSION=$(cat version)
    - composer install
    - /bin/sh build/paydock/build-paydock.prod.sh
    - /bin/sh build/paydock/clear-cs-warnings-paydock.sh
    # Replaced fragile grep/sed with a slightly more robust (though still regex-based) approach.
    # Consider using a PHP script to parse plugin.php if more robust parsing is needed.
    - MAJOR_MINOR=$(grep -oP "PLUGIN_VERSION',\s*'\K[0-9]+\.[0-9]+\.[0-9]+" plugin.php | head -n 1)
    - echo "ARTIFACT_NAME=woo_paydock-$MAJOR_MINOR-$VERSION" > VERSION.TXT
  artifacts:
    paths:
      - VERSION.TXT
    reports:
      dotenv: VERSION.TXT

publish_paydock:
  image: composer:lts
  stage: publish
  # Uncomment the 'rules' section below if you want this job to run only on 'main' and 'power_board' branches.
  # rules:
  #   - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "power_board"'
  needs:
    - job: prepare_paydock_version
      artifacts: true
  script:
    - composer install --no-dev
    - /bin/sh build/paydock/build-paydock.prod.sh
    - /bin/sh build/paydock/clear-cs-warnings-paydock.sh
    - /bin/sh cleanup_files_for_zip.sh
    - echo "ZIP_PUBLISH_JOB_ID=$CI_JOB_ID" > zip_publish.job.id # Renamed to avoid conflict if already used
    # Simplified artifact preparation: move all contents into the target directory.
    - mkdir -p paydock-for-woocommerce
    - mv $(ls -A | grep -v 'paydock-for-woocommerce') paydock-for-woocommerce/ || true # Move all current contents into paydock-for-woocommerce/
  artifacts:
    name: "$ARTIFACT_NAME" # Ensure artifacts are named dynamically
    paths:
      - paydock-for-woocommerce/
    reports:
      dotenv: zip_publish.job.id
  trigger:
    # IMPORTANT: Replace with your actual downstream project path, e.g., "paydock/platform/downstream-project"
    project: "your/downstream/project/path"
    branch: main # Or the branch you want to trigger
    strategy: depend
    # Pass variables to downstream if needed
    variables:
      UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
      PAYDOCK_ZIP_JOB_ID: $CI_JOB_ID # Use this in downstream to fetch artifact
